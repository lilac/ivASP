// {{{ GPL License 

// This file is part of gringo - a grounder for logic programs.
// Copyright (C) 2013  Roland Kaminski

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// }}}

#define YYCTYPE   char
#define YYCURSOR  cursor()
#define YYLIMIT   limit()
#define YYMARKER  marker()
#define YYFILL(n) {fill(n);}

/*!re2c
    NUMBER     = "0"|([1-9][0-9]*);
    ANY        = [\000-\377];
    WS         = [\t\r ]*;
    NL         = "\n";
    IDENTIFIER = "_"*[a-z]['A-Za-z0-9_]*;
    VARIABLE   = "_"*[A-Z]['A-Za-z0-9_]*;
    ANONYMOUS  = "_";
    STRING     = "\"" ([^\\"\n]|"\\\""|"\\\\"|"\\n")* "\"";
    WSNL       = [\t\r\n ]*;
    SHOWSIG   = "#show" WSNL ("-")? WSNL IDENTIFIER WSNL "/" WSNL NUMBER WSNL ".";
*/

/*
IDENTIFIER       { token_.index  = g_->index(string()); return IDENTIFIER; }
NUMBER           { token_.number = integer(); return NUMBER; }
VARIABLE         { token_.index = g_->index(string()); return VARIABLE; }
ANONYMOUS        { return ANONYMOUS; }
STRING           { token_.index = g_->index(g_->unquote(string(1,1))); return STRING; }
*/

int Gringo::Input::NonGroundParser::lex_impl(void *pValue, NonGroundGrammar::location &loc)
{
start:
    int bc = 0;
    start();
    loc.begin.filename = const_cast<std::string*>(&filename());
    loc.begin.line = line();
    loc.begin.column = column();
    auto &value = *static_cast<Gringo::Input::NonGroundGrammar::parser::semantic_type*>(pValue);
    /*!re2c
        WS               { goto start; }
        NL               { if(eof()) return 0; step(); goto start; }
        "#begin_lua"     { goto lua; }
        "#include"       { return NonGroundGrammar::parser::token::INCLUDE; }
        "#show"          { return NonGroundGrammar::parser::token::SHOW; }
        SHOWSIG         { 
			std::string s(string(5,1));
			std::string name;
			size_t b(s.find_first_not_of(" \t\r\n"));
			if (s[b] == '-') {
				name+= '-';
				b = s.find_first_not_of(" \t\r\n", b+1);
			}
			size_t e(s.find_first_of(" \t\r\n/", b));
			name+= s.substr(b, e - b);
			b = s.find_first_of("1234567890", e);
			e = s.find_last_not_of("1234567890", b);
			unsigned length(std::stoi(s.substr(b, e - b)));
			value.uid = FWSignature(name, length).uid();
			return NonGroundGrammar::parser::token::SHOWSIG;
		}
        "#const"         { return NonGroundGrammar::parser::token::CONST; }
        "#minimi"[zs]"e" { return NonGroundGrammar::parser::token::MINIMIZE; }
        "#maximi"[zs]"e" { return NonGroundGrammar::parser::token::MAXIMIZE; }
        "#base"          { return NonGroundGrammar::parser::token::BASE; }
        "#cumulative"    { return NonGroundGrammar::parser::token::CUMULATIVE; }
        "#volatile"      { return NonGroundGrammar::parser::token::VOLATILE; }
        "#external"      { return NonGroundGrammar::parser::token::EXTERNAL; }
        "#forget"        { return NonGroundGrammar::parser::token::FORGET; }
        "#inf"("imum")?  { return NonGroundGrammar::parser::token::INFIMUM; }
        "#sup"("remum")? { return NonGroundGrammar::parser::token::SUPREMUM; }

        "not"            { value.uid = not_; return NonGroundGrammar::parser::token::NOT; }
        IDENTIFIER       { value.uid = FWString::uid(string()); return NonGroundGrammar::parser::token::IDENTIFIER; }
        NUMBER           { value.num = integer(); return NonGroundGrammar::parser::token::NUMBER; }
        VARIABLE         { value.uid = FWString::uid(string()); return NonGroundGrammar::parser::token::VARIABLE; }
        ANONYMOUS        { return NonGroundGrammar::parser::token::ANONYMOUS; }
        STRING           { value.uid = FWString::uid(Gringo::quote(string(1, 1))); return NonGroundGrammar::parser::token::STRING; }

        "#true"          { return NonGroundGrammar::parser::token::TRUE; }
        "#false"         { return NonGroundGrammar::parser::token::FALSE; }
        "#sum"           { return NonGroundGrammar::parser::token::SUM; }
        "#sum+"          { return NonGroundGrammar::parser::token::SUMP; }
        "#count"         { return NonGroundGrammar::parser::token::COUNT; }
        "#min"           { return NonGroundGrammar::parser::token::MIN; }
        "#max"           { return NonGroundGrammar::parser::token::MAX; }
        ";"              { return NonGroundGrammar::parser::token::SEM; }
        ".."             { return NonGroundGrammar::parser::token::DOTS; }
        "."              { return NonGroundGrammar::parser::token::DOT; }
        ":"              { return NonGroundGrammar::parser::token::COLON; }
        ":-"             { return NonGroundGrammar::parser::token::IF; }
        ":~"             { return NonGroundGrammar::parser::token::WIF; }
        ","              { return NonGroundGrammar::parser::token::COMMA; }
        "|"              { return NonGroundGrammar::parser::token::VBAR; }
        "["              { return NonGroundGrammar::parser::token::LBRACK; }
        "]"              { return NonGroundGrammar::parser::token::RBRACK; }
        "("              { return NonGroundGrammar::parser::token::LPAREN; }
        ")"              { return NonGroundGrammar::parser::token::RPAREN; }
        "{"              { return NonGroundGrammar::parser::token::LBRACE; }
        "}"              { return NonGroundGrammar::parser::token::RBRACE; }
        "+"              { return NonGroundGrammar::parser::token::ADD; }
        "-"              { return NonGroundGrammar::parser::token::SUB; }
        "**"             { return NonGroundGrammar::parser::token::POW; }
        "\\"             { return NonGroundGrammar::parser::token::MOD; }
        "*"              { return NonGroundGrammar::parser::token::MUL; }
        ">"              { return NonGroundGrammar::parser::token::GT; }
        "<"              { return NonGroundGrammar::parser::token::LT; }
        ">="             { return NonGroundGrammar::parser::token::GEQ; }
        "<="             { return NonGroundGrammar::parser::token::LEQ; }
        "=="             { return NonGroundGrammar::parser::token::EQ; }
        "!="             { return NonGroundGrammar::parser::token::NEQ; }
        "<>"             { return NonGroundGrammar::parser::token::NEQ; }
        "="              { return NonGroundGrammar::parser::token::ASSIGN; }
        "/"              { return NonGroundGrammar::parser::token::SLASH; }
        "@"              { return NonGroundGrammar::parser::token::AT; }
        "&"              { return NonGroundGrammar::parser::token::AND; }
        "^"              { return NonGroundGrammar::parser::token::XOR; }
        "~"              { return NonGroundGrammar::parser::token::BNOT; }
        "?"              { return NonGroundGrammar::parser::token::QUESTION; }
        "%*"             { bc++; goto blockcomment; }
        "%"              { goto comment; }
        ANY              { lexerError(string()); goto start; }
    */
lua:
    /*!re2c
        "#end_lua"       { value.uid = FWString::uid(string(10, 8)); return NonGroundGrammar::parser::token::LUA; }
        NL               { if(eof()) { lexerError("<EOF>"); return 0; } step(); goto lua; }
        ANY              { goto lua; }
     */
blockcomment:
    /*!re2c
        "*%" { if(--bc == 0) goto start; goto blockcomment; }
        "%*" { bc++; goto blockcomment; }
        "%"  { goto comment; }
        NL   { if(eof()) { lexerError("<EOF>"); return 0; } step(); goto blockcomment; }
        ANY  { goto blockcomment; }
    */
comment:
    /*!re2c
        NL   { if(eof()) { if(bc > 0) lexerError("<EOF>"); return 0; } step(); if(bc > 0) goto blockcomment; goto start; }
        ANY  { goto comment; }
    */
    assert(false);
    return 0;
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL
